# # 用于构建和部署Hugo网站到GitHub Pages的示例工作流程
# name: 发布Hugo网站到Pages

# on:
#   # 在目标为默认分支的推送上运行
#   push:
#     branches:
#       - main

#   # 允许您手动从“Actions”标签运行此工作流程
#   workflow_dispatch:

# # 设置GITHUB_TOKEN的权限，以允许部署到GitHub Pages
# permissions:
#   contents: read
#   pages: write
#   id-token: write
#   actions: read

# # 仅允许一个并发部署，跳过在进行中的运行与最新排队的运行之间排队的运行。
# # 但是，请不要取消进行中的运行，因为我们希望这些生产部署能够完成。
# concurrency:
#   group: "pages"
#   cancel-in-progress: false

# # 默认使用bash
# defaults:
#   run:
#     shell: bash

# jobs:
#   # 构建作业
#   build:
#     runs-on: ubuntu-latest
#     env:
#       HUGO_VERSION: 0.120.2
#     steps:
#       - name: 安装Hugo CLI
#         run: |
#           wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
#           && sudo dpkg -i ${{ runner.temp }}/hugo.deb          
#       - name: 安装Dart Sass
#         run: sudo snap install dart-sass
#       - name: 检出
#         uses: actions/checkout@v4
#         with:
#           submodules: recursive
#           fetch-depth: 0
#       - name: 设置Pages
#         id: pages
#         uses: actions/configure-pages@v3
#       - name: 安装Node.js依赖
#         run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
#       - name: 使用Hugo构建
#         env:
#           # 为了与Hugo模块的最大向后兼容性
#           HUGO_ENVIRONMENT: production
#           HUGO_ENV: production
#         run: |
#           hugo \
#             --gc \
#             --minify \
#             --baseURL "${{ steps.pages.outputs.base_url }}/"          
#       - name: 上传构建产物
#         uses: actions/upload-pages-artifact@v3
#         with:
#           path: ./public

#   # 部署作业
#   deploy:
#     environment:
#       name: github-pages
#       url: ${{ steps.deployment.outputs.page_url }}
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: 部署到GitHub Pages
#         id: deployment
#         uses: actions/deploy-pages@v2


name: 发布Hugo网站到Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# 顶层权限（有些组织策略会覆盖，所以 deploy 作业里还会再写一遍）
permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

concurrency:
  group: pages
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.120.2
    steps:
      - name: 打印关键上下文（诊断）
        run: |
          echo "repo=${{ github.repository }}"
          echo "run_id=${{ github.run_id }}"
          echo "run_attempt=${{ github.run_attempt }}"
          echo "workflow=${{ github.workflow }}"
      - name: 安装Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: 安装Dart Sass
        run: sudo snap install dart-sass
      - name: 检出
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: 设置Pages
        id: pages
        # 用官方最新版，旧版也可，但新版本 bug 更少
        uses: actions/configure-pages@v5
      - name: 安装Node.js依赖
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: 使用Hugo构建
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo --gc --minify --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: 检查构建输出（强烈建议保留）
        run: |
          set -eux
          ls -lah ./public
          test -e ./public/index.html
      - name: 上传构建产物（artifact 名称固定为 github-pages）
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
          name: github-pages  # 显式指定，和 deploy 保持一致
      - name: 诊断：列出本次 run 的 artifacts（用 REST API）
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -eux
          curl -sSf -H "authorization: Bearer $GH_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts \
            | tee artifacts.json
          echo "---- 提取 artifact 名称 ----"
          cat artifacts.json | jq -r '.artifacts[].name'

  deploy:
    # 再次在作业级别显式声明权限，绕过环境/组织策略的覆盖
    permissions:
      contents: read
      pages: write
      id-token: write
      actions: read
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 部署到GitHub Pages
        id: deployment
        # 建议用 v4（或 v3）；你贴的 v2/v3 都可，但 v4 是当前推荐
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages  # 与上传步骤完全一致
